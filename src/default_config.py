#
# KTH Royal Institute of Technology
#

#
# This file is for reference only and should *not* me modified.
# To change the configuration, create a new config.py file
# and import this one in it as 'from src.default_config import *'
#

# The size of the input images to be fed to the network during training.
CROP_SIZE: int = 128

# The size of the patches to be extracted from the datasets
PATCH_SIZE = (150, 150)

# Whether or not we should store the patches produced by the data manager
CACHE_PATCHES: bool = False

# Number of epochs used for training
EPOCHS: int = 10

# Kernel size of the custom Separable Convolution layer. Cannot be changed without changing the cuda kernel code
OUTPUT_1D_KERNEL_SIZE: int = 51

# The batch size used for mini batch gradient descent
BATCH_SIZE: int = 100

# Upper limit on the number of samples used for training
MAX_TRAINING_SAMPLES: int = 500_000

# Upper limit on the number of samples used for validation
MAX_VALIDATION_SAMPLES: int = 100

# Number of workers of the torch.utils.data.DataLoader AND of the data manager
# Set this to 0 to work on the main thread
NUM_WORKERS: int = 0

# Random seed fed to torch
SEED: int = None

# "DAVIS" or "custom". Custom searches all direct subdirectories of the given directory for images, names as <framenumber>.<jpg|jpeg|png>, each subdirectory should start counting from 0, writes the patches.json for them and might cache them in a cache directory for faster access
# custom does not yet support validation or visual test sets, that should change.... #TODO
DATASET = "DAVIS"

# length of image sequences captures, specifies number of images to be generated in the middle of the first and the last image
# the dataset needs to be generated with a length bigger or equal to the one used when training the network
# must be a power of 2 plus 1, at least 3. Reasonable for small patches is probably at most 9...
# != 3 is only supported for custom dataset and FORCE_HORIZONTAL = False
SEQUENCE_LENGTH = 3

# sequence length as supported by the dataset
MAX_SEQUENCE_LENGTH = 3

# number of frames between frames packed together as tuples
CUSTOM_STRIDE = 2

# number of frames skipped after a set of frames used for a tuple
# only supported for custom dataset
CUSTOM_FRAMESKIP = 90

# flows below this size are not guaranteed to be part of the dataset
FLOW_THRESHOLD: float = 2

# reject flows above this size
MAX_FLOW: float = 999

# rotate the patches such that the main movement, according to the optical flow, is horizontal
FORCE_HORIZONTAL = False

# Path to the dataset directory
DATASET_DIR = './dataset'

# Force torch to run on CPU even if CUDA is available
ALWAYS_CPU: bool = False

# Path to the outout directory where the model checkpoins should be stored
OUTPUT_DIR: str = './out'

# Whether or not the model parameters should be written to disk at each epoch
SAVE_CHECKPOINS: bool = False

# Force model to use the slow Separable Convolution implementation even if CUDA is available
ALWAYS_SLOW_SEP_CONV: bool = False

# Whether or not we should run the validation set on the model at each epoch
VALIDATION_ENABLED: bool = False

# Whether or not we should run the visual test set on the model at each epoch
VISUAL_TEST_ENABLED: bool = False

# Whether or not the data should be augmented with random transformations
AUGMENT_DATA: bool = True

# Probability of performing the random temporal order swap of the two input frames
RANDOM_TEMPORAL_ORDER_SWAP_PROB: float = 0.5

START_FROM_EPOCH = 1

# Start from pre-trained model (path)
START_FROM_EXISTING_MODEL = None

# One of {"l1", "vgg", "ssim"}
LOSS: str = "l1"

VGG_FACTOR: float = 1.0

# Learning rate for each epoch
LEARNING_RATE = [0.001] * EPOCHS

# dataset to generate a parallax view on, if GENERATE_PARALLAX_VIEW is true
PARALLAX_DATASET_DIR = None

# do a run to generate parallax views with data in PARALLAX_DATASET_DIR
GENERATE_PARALLAX_VIEW: bool = False

# validate after each generation using minimum PSNR on the dataset specified in PARALLAX_DATASET_DIR
PARALLAX_VALIDATION: bool = False

# the number of frames in the dataset specified in PARALLAX_DATASET_DIR 
PARALLAX_VIEW_T: int = 193
# frames divisibly by this number are used as input images to DSLF reconstruction
PARALLAX_VIEW_CAM_INTERVAL: int = 16
# output directory for images generated by GENERATE_PARALLAX_VIEW = True
PARALLAX_OUTPUT_DIR = None


# mode of the network produce one image from two images, or two from three
NET_MODE = "2to1" # or "3to2"

# location of flownet2 cs weight file for dataset building via flownet2
FLOWNET2_CS_TRAINED_WEIGHTS = "./video/FlowNet2-CS_checkpoint.pth.tar"